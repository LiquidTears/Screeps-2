var roleUpgrader = require('role.upgrader');
var roleMobileWorker = {
    run: function(creep) {
        
        if(Game.flags.workCheckpoint){
            if(creep.memory.checkpoint == 0){
            creep.moveTo(Game.flags.workCheckpoint);
            if(creep.pos.x == Game.flags.workCheckpoint.pos.x && creep.pos.y == Game.flags.workCheckpoint.pos.y){
                creep.memory.checkpoint = 1;
                }
            }
            
            if(creep.memory.checkpoint == 1){
            creep.moveTo(Game.flags.workCheckpoint2);
            if(creep.pos.x == Game.flags.workCheckpoint2.pos.x && creep.pos.y == Game.flags.workCheckpoint2.pos.y){
                creep.memory.checkpoint = 2;
                }
            }
            
            if(creep.memory.checkpoint == 2){
                //all worker code
                if(creep.memory.building && creep.carry.energy == 0) {
                    creep.memory.building = false;
                    creep.say('ðŸ”„');
        	    }
        
        	    if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) {
        	        creep.memory.building = true;
        	        creep.say('ðŸš§');
        	    }
                if(creep.room != Game.flags.Work.room){
                    creep.moveTo(Game.flags.Work, {visualizePathStyle: {stroke: '#00ff00'}});
                } else {
        	        if(creep.memory.building) {
        	            var targets = creep.room.find(FIND_CONSTRUCTION_SITES);
                        if(targets.length) {
                            if(creep.build(targets[0]) != -6) {
                                creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#00ff00'}});
                            }
                        } else {
                            var tower = creep.room.find(FIND_STRUCTURES, {
                                filter: (structure) => {return (structure.structureType == STRUCTURE_TOWER) }});
                            if(tower.length > 0){
                                //START HARVESTER CODE
                                if(creep.carry.energy == 0) {
                                    creep.memory.isHarvesting = true;
                                    creep.say('ðŸ”„');
                                }
                                else if(creep.carry.energy == creep.carryCapacity)
                                {
                                    creep.memory.isHarvesting = false;
                                    creep.say('ðŸš§');
                                }
                
                                if(!creep.memory.isHarvesting)
                                {
                                    var targets = creep.room.find(FIND_STRUCTURES, {
                                        filter: (structure) => {
                                            return (structure.structureType == STRUCTURE_EXTENSION ||
                                            structure.structureType == STRUCTURE_SPAWN ||
                                            structure.structureType == STRUCTURE_TOWER ||
                                            structure.structureType == STRUCTURE_STORAGE) 
                                            && structure.energy < structure.energyCapacity;
                                            }
                                    });
                                    if(targets.length > 0) 
                                    {
                                        targets.sort((a,b) => a.energy - b.energy);
                                        if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                                            creep.moveTo(targets[0]);
                                        }
                                    }else{
                                        roleUpgrader.run(creep);
                                    }
                                    }else{
                                    var sources = creep.room.find(FIND_SOURCES);
                                    var index = 0;
                                    while(index < sources.length)
                                    {
                                        if(creep.harvest(sources[index]) != -6) 
                                        {
                                            creep.moveTo(sources[index]);
                                        }
                                        index = index + 1;
                                    }
                                }
                              // END HARVESTER CODE  
                            } else {
                                // START REPAIRER CODE
                                if(creep.memory.repairing && creep.carry.energy == 0) {
                                    creep.memory.repairing = false;
                                }
                        
                                if(!creep.memory.repairing && creep.carry.energy == creep.carryCapacity) {
                                    creep.memory.repairing = true;
                                }
                        
                                if(creep.memory.repairing) {
                                    var targets = creep.room.find(FIND_STRUCTURES, {
                                     filter: object => object.hits < (object.hitsMax/4)
                                    });
                        
                                    targets.sort((a,b) => a.hits - b.hits);
                        
                                    if(targets.length > 0) {
                                        if(creep.repair(targets[0]) == ERR_NOT_IN_RANGE) {
                                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}}); 
                                    }
                                }
                                } else {
                                    var sources = creep.room.find(FIND_SOURCES);
                                    if(creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                                        creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#ffffff'}});
                                    }
                                }
                            }
                        }
        	        }
        	        else {
        	            var sources = creep.room.find(FIND_SOURCES);
                        if(creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                            creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#00ff00'}});
                        }
        	        }
        	        //END REPAIRER CODE
        	    }
            }
        }
        else
        {
            //all worker code again
            if(creep.memory.building && creep.carry.energy == 0) {
                creep.memory.building = false;
                creep.say('ðŸ”„');
    	    }
    
    	    if(!creep.memory.building && creep.carry.energy == creep.carryCapacity) {
    	        creep.memory.building = true;
    	        creep.say('ðŸš§');
    	    }
            if(creep.room != Game.flags.Work.room){
                creep.moveTo(Game.flags.Work, {visualizePathStyle: {stroke: '#00ff00'}});
            } else {
    	        if(creep.memory.building) {
    	            var targets = creep.room.find(FIND_CONSTRUCTION_SITES);
                    if(targets.length) {
                        if(creep.build(targets[0]) != -6) {
                            creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#00ff00'}});
                        }
                    } else {
                        var tower = creep.room.find(FIND_STRUCTURES, {
                            filter: (structure) => {return (structure.structureType == STRUCTURE_TOWER) }});
                        if(tower.length > 0){
                            //START HARVESTER CODE
                            if(creep.carry.energy == 0) {
                                creep.memory.isHarvesting = true;
                                creep.say('ðŸ”„');
                            }
                            else if(creep.carry.energy == creep.carryCapacity)
                            {
                                creep.memory.isHarvesting = false;
                                creep.say('ðŸš§');
                            }
            
                            if(!creep.memory.isHarvesting)
                            {
                                var targets = creep.room.find(FIND_STRUCTURES, {
                                    filter: (structure) => {
                                        return (structure.structureType == STRUCTURE_EXTENSION ||
                                        structure.structureType == STRUCTURE_SPAWN ||
                                        structure.structureType == STRUCTURE_TOWER ||
                                        structure.structureType == STRUCTURE_STORAGE) 
                                        && structure.energy < structure.energyCapacity;
                                        }
                                });
                                if(targets.length > 0) 
                                {
                                    targets.sort((a,b) => a.energy - b.energy);
                                    if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                                        creep.moveTo(targets[0]);
                                    }
                                }else{
                                    roleUpgrader.run(creep);
                                }
                                }else{
                                var sources = creep.room.find(FIND_SOURCES);
                                var index = 0;
                                while(index < sources.length)
                                {
                                    if(creep.harvest(sources[index]) != -6) 
                                    {
                                        creep.moveTo(sources[index]);
                                    }
                                    index = index + 1;
                                }
                            }
                          // END HARVESTER CODE  
                        } else {
                            // START REPAIRER CODE
                            if(creep.memory.repairing && creep.carry.energy == 0) {
                                creep.memory.repairing = false;
                            }
                    
                            if(!creep.memory.repairing && creep.carry.energy == creep.carryCapacity) {
                                creep.memory.repairing = true;
                            }
                    
                            if(creep.memory.repairing) {
                                var targets = creep.room.find(FIND_STRUCTURES, {
                                 filter: object => object.hits < (object.hitsMax/4)
                                });
                    
                                targets.sort((a,b) => a.hits - b.hits);
                    
                                if(targets.length > 0) {
                                    if(creep.repair(targets[0]) == ERR_NOT_IN_RANGE) {
                                creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}}); 
                                }
                            }
                            } else {
                                var sources = creep.room.find(FIND_SOURCES);
                                if(creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                                    creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#ffffff'}});
                                }
                            }
                        }
                    }
    	        }
    	        else {
    	            var sources = creep.room.find(FIND_SOURCES);
                    if(creep.harvest(sources[1]) == ERR_NOT_IN_RANGE) {
                        creep.moveTo(sources[1], {visualizePathStyle: {stroke: '#00ff00'}});
                    }
    	        }
    	        //END REPAIRER CODE
    	    }
        }
    }
};

module.exports = roleMobileWorker;






	    
